//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ixlle\source\repos\NexLanguage\NexLanguage.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NexLanguage {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class NexLanguageParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, ID=7, WS=8;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_assignment = 2, RULE_datatype = 3;
	public static readonly string[] ruleNames = {
		"program", "declaration", "assignment", "datatype"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "'int'", "'Int32'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NexLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NexLanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexLanguageVisitor<TResult> typedVisitor = visitor as INexLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 10;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__4:
				case T__5:
					{
					State = 8; declaration();
					}
					break;
				case ID:
					{
					State = 9; assignment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 12;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NexLanguageParser.ID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexLanguageVisitor<TResult> typedVisitor = visitor as INexLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; datatype();
			State = 15; Match(ID);
			State = 16; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(NexLanguageParser.ID, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexLanguageVisitor<TResult> typedVisitor = visitor as INexLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(ID);
			State = 19; Match(T__1);
			State = 20; datatype();
			State = 21; Match(T__2);
			State = 22; Match(T__3);
			State = 23; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.EnterDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexLanguageListener typedListener = listener as INexLanguageListener;
			if (typedListener != null) typedListener.ExitDatatype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexLanguageVisitor<TResult> typedVisitor = visitor as INexLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_la = _input.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\n\x1E\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x6\x2\r\n\x2\r\x2\xE\x2"+
		"\xE\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x2\x2\x2\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x3\x3\x2\a\b"+
		"\x1B\x2\f\x3\x2\x2\x2\x4\x10\x3\x2\x2\x2\x6\x14\x3\x2\x2\x2\b\x1B\x3\x2"+
		"\x2\x2\n\r\x5\x4\x3\x2\v\r\x5\x6\x4\x2\f\n\x3\x2\x2\x2\f\v\x3\x2\x2\x2"+
		"\r\xE\x3\x2\x2\x2\xE\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF\x3\x3\x2\x2\x2"+
		"\x10\x11\x5\b\x5\x2\x11\x12\a\t\x2\x2\x12\x13\a\x3\x2\x2\x13\x5\x3\x2"+
		"\x2\x2\x14\x15\a\t\x2\x2\x15\x16\a\x4\x2\x2\x16\x17\x5\b\x5\x2\x17\x18"+
		"\a\x5\x2\x2\x18\x19\a\x6\x2\x2\x19\x1A\a\x3\x2\x2\x1A\a\x3\x2\x2\x2\x1B"+
		"\x1C\t\x2\x2\x2\x1C\t\x3\x2\x2\x2\x4\f\xE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NexLanguage
